
@pg.production('expr : IDENTIFIER')
and
@pg.production('expr : LPAREN expr RPAREN')
	- problem?
	- (x) would be parsed as an expr right now

	- so arg_list has to have precedence


func_def : IDENTIFIER LPAREN RPAREN { ... }
func_def : IDENTIFIER LPAREN arg_list RPAREN { ... }

arg_list : IDENTIFIER
 		 | IDENTIFIER , arg_list


- function definition vs calling
- f() case

func_call : INDENTIFIER LPAREN RPAREN
func_call : INDENTIFIER LPAREN arg_list RPAREN

arg_list : expr
	     | expr , arg_list

x()
x ()

function name(){

}

function name(){ block }
function name(){ block return }
function name(x,y,z){ block return }

func_def : DEF ID ( ){ block }
func_def : FUNCTION IDENTIFIER LPAREN RPAREN LBRACE block RBRACE
	     | FUNCTION IDENTIFIER LPAREN RPAREN LBRACE block return RBRACE
	     | FUNCTION IDENTIFIER LPAREN arg_list RPAREN LBRACE block return RBRACE


return : RETURN
	   | RETURN LPAREN arg_list RPAREN


when defining a function we pass an arg_list of variables
	- shouldn't be evaluated, they don't have value in this context
	- and def f(x, 1) has no purpose

	- what about shadowing?
		- x = 10
		  def test(x) ...

	- arg lists for definitions and calls are kind of mutually exclusive cases
	- how do we know not to evaluate them, even if the variable has a value locally?
		- do we pass the caller object to arg_list?
			- if it's a function we eval
			- else we just return a list of names


evaluating a function object --> ... ?
	- passed
		- possibly empty list of strings for variable names
		- block of statement(s)
		- optional return object

	- if no return object than evaluating the function just evals the block
	  and returns nothing
	  	- maybe returns 1/True if no errors else 0/False

	- we need a local variable space and we're evaluating the block wrt that
		- how?
		- pass a namespace object to block eval
			- default is global
		- we could have local names that reference global objects

	- don't aim for the perfect solution initially, funner that way and you'll learn more

-----------------------

- passing an object to a class passes a reference
	- updates in object are inherited
	- same id

- passing namespace at init..
	- inefficient? unnecessary?
	- if changes in the space are updated then we only have to add in init and not every eval?

	- actually we can't assign a block a namespace on creation because we don't know if it will end up in a function yet...
		- same with all statements I think

- is there any reason to actually set the namespace
  as an attribute?
  	- if we want to know what space it belongs to/evals with
  	- code as an object, knowing what the parent/caller is


- functions create their own namespace that should be destroyed after
  	- is this an object of @main?


- add space to eval of everything...
	- it only has impact for literals and function calls (??)
	- and variables


------

- Return object and evaluating function block
	- function f(a,b){ 
		  a = a * 10
		  let c = a - b
	      return(a + b + c)
	}
	- f(0, 10) -> -20

	- block can be empty if we are just returning the value of a statement
		- so block, args, and return are optional, but we need at least a block OR a return..
		- func without block isn't included in current parser definition

	- wait.. we're writing eval for FunctionDef, that doesn't make sense

	- evaluating function call
		- create new namespace with unique name referencing function (and parent/caller?)
			- probably want to know where it is being called
		- eval arguments and give variables declared in FunctionDef those values
			- (in the function namespace)
			- how?
				- FunctionDef should be an object of the current namespace
				- get its args attribute (list of variables names)
		- pass this to block.eval
		- eval each of the statements in block updating namespace if needed
			- might involve calling functions
		- pass the final namespace to return object
		- evaluate last statement with that namespace and pass result back to FunctionDef
		- ...

	- is a return object needed?
		- the token has to be parsed but is it actually doing anything special?
		- it's just the final eval statement of the block

		- it's a special statement though because you can't assign things or define
		  identifiers or functions
		  	- it's a limited expression we don't have a class for


- parent_space of FunctionDef and FunctionCall can be different
	- *often will be
	- funcdef needs to be added to the namespace it's declared in
		- do we know what this is on init? what if we have a function in a function?
		- if we parse a function and don't yet know it's inside another larger function then
		  the space would be incorrectly set as @main
		  	- so add the space on eval?

- function f(a,b){ 
      a = a * 10
	  let c = a - b
	  return(a + b + c)
	  }

	  - no case yet for variable assignment without let..
	  - a = a * 10 is a good case to test
	  	- still have to add +=, -=, etc eventually
	  - assuming 'a' is already defined, what is this class?
	  	- it's just a new case of Assignment
	  		- so we need namespace in Assignment init
	  			- but what if it's inside a function like here? aaaah
	  				- calling eval in Assignment init was a mistake earlier (?)
	  				- interesting that worked


- simplest function test?
	- function test(a){
	      a = 10
	      return(a)
	   }




- ** function with multiple return statements ** ...



- function block can be just a statement
	- i.e. no new line --> "function test(a) { a = a * 10 return(a) }""
		- right now we need newline the way block and return are parsed


- booleans expressions
	- order of operations (python):
		- in, not in, is, is not, <, <=,  >,  >=, <>, != ,==
		- not x
		- and
		- or

	- <> ?

- we only have floats and ints as datatypes..

- statement : stmt ; stmt ?
- if 'f' in 'foo': print('1'); print('2'); print('3') ?


- expr -> NEGATIVE NEGATIVE expr
- expr -> NEGATIVE expr
	- caused 18 reduce/reduce conflicts, good example

===========

- if statements
	- we haven't done any control flow yet


- what is something impressive the language can do at this point?
	- can we define a function in a function?
	- well first, can we even call a function in another one?


-  "test() + 1"  and  "1 + test()" don't work right now
	- either unexpected plus or unexpected lparen
	- function calls aren't an expr and we've only defined expr + expr


@pg.production('stmt : function_call')
def func_call_stmt(state, p):
    return p[0]

@pg.production('stmt : function_def')
def func_def_stmt(state, p):
    return p[0]

    - this isn't doing anything...
    - just do stmt -> what you have for function call/def

- any noterminal -> nonterminal with return p[0] is unecessary (?)
	- no.. e.g.  stmt -> expr

-----

- nested function calls
	- f(g())
		- arg_list : func_call
				   | expr

- how do we get expressions of functions to evaluate?
	- like "f() + 1" or "f(g) == True"
	- func_expr : func_call
				| LPAREN func_call RPAREN

		- maybe we can do this in stmt

	- func_expr : func_def expr
				| expr func_def

				- won't work.. add is defined as expr PLUS expr, PLUS would be unexpected token

- we have to eval the func_call and continue parsing the result followed by PLUS EXPR
	- but we can't eval every function call in parsing because we have just defined it but the full current expression hasn't been parsed yet

- important to keep in mind difference bewtween parsing
and evaluating
	- confused it a bit by putting Compile method in the parser file
	- a function definition followed by only a call is fine because both can be parsed then evaluated
		- eval on the call while parsing would fail because we haven't added the definition to namepsace
	a func definition followed by some expression of a call like "f(1) + 1 will fail because we don't know how to parse a function call followed by plus
		- there's no symbol that statement can be replaced by

- idea: check if f is in namespace, if it is replace the function call with f.eval()
	- but then you end up with literal values in the parser results not tokens
	- and we still get "unexpected token PLUS" without expr : func_call

-  "function f(a){ return(a+1) } ; f(1) + 1"  works but when it's two code statement parsed and evald after each other we get "int 2 has no attribute value" in the final add
	- why doesn't this happen when it's one line? I don't understand..
		- because f isn't in namepsace yet when parsing it all one line
		- so we don't evaluate the func call, we just put it in the add object

- ffs.....
	- why have "stmt : func_call" in the first place?
	- because i thought that's what braid guy did? because it seems more complex than an expression? because stmt : func_def?
	- why not expr : func_call?
		- arg_list is list of expr though..

	- funcdef has to be a statement because block can contain new lines

- arg_list for def and call is DIFFERENT
	- function definition should only take variables
	- parameters vs arguments!

-----

https://docs.python.org/3/reference/expressions.html#operator-precedence

-----

- if statement eval
	- eval condition. if true eval block and return result
	- or keep them separate but linked

- does the if object have the block code and determine if it can be executed?
- or do blocks have condition statements they evaluate?


-----

- namespace collision due to code that allowed recursion and closure
    f(x) => x + 1;
    let x = 10;
    f(1) --> 11 not 2

    - only add variables from parent space that aren't in func_def space

- def f(x,i) {
    if i == 0: return(x)
    else:
        i = i - 1;
        x = x + 1;
        f(x,i);
}

    - this doesn't work because parser always expects (a single) RETURN after the function block
    - how do we handle this case? also have to deal with multiple returns at some point..

- def f(x,i) {
    if( i != 0 )
    {
        i = i - 1;
        x = x + 1;
        f(x,i);
    } else {
        return(x);
    }
}

    - also doesn't work (unexpected RETURN)
    - return is part of the block not after it

- can we make it so returns are just block element statements that

