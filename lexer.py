from rply import LexerGenerator


lg = LexerGenerator()
lg.add('LET', r'\blet\b')
lg.add('RETURN', r'\breturn\b')
lg.add('DEF', r'\bdef\b')
lg.add('IF', r'\bif\b')
lg.add('ELIF', r'\belif\b')
lg.add('ELSE', r'\belse\b')
lg.add('SWITCH', r'\bswitch\b')
lg.add('CASE', r'\bcase\b')
lg.add('DEFAULT', r'\bdefault\b')
lg.add('BREAK', r'\bbreak\b')
# lg.add('THEN', r'\bthen\b')
lg.add('?', r'\?')
lg.add('<=>', r'<=>')
lg.add('<=', r'<=')
lg.add('>=', r'>=')
lg.add('<', r'<')
lg.add('>', r'>')
lg.add('!=', r'!=')
lg.add('==', r'==')
lg.add('=>', r'=>')
lg.add('NOT', r'\bnot\b')
lg.add('AND', r'\band\b')
lg.add('OR', r'\bor\b')
lg.add('TRUE', r'\bTrue\b')
lg.add('FALSE', r'\bFalse\b')
lg.add('WHILE', r'\bwhile\b')
lg.add(',', r'\,')
lg.add(';', r'\;')
lg.add(':', r':')
lg.add('INT', r'(?<![\d.])[0-9]+(?![\d.])')
lg.add('FLOAT', r'\d+\.\d+')
lg.add('(', r'\(')
lg.add(')', r'\)')
lg.add('{', r'\{')
lg.add('}', r'\}')
lg.add('++', r'\+\+')
lg.add('--', r'--')
lg.add('NEG', r'^-|(?<=\()-|(?<=[\+\-\*\/\^])-|(?<==\s)-|(?<=[^0-9./)])-(?=[0-9.a-zA-Z])')
lg.add('PLUS', r'\+')
lg.add('MINUS', r'-')
lg.add('POW', r'\^|\*{2}')
lg.add('MUL', r'\*')
lg.add('DIV', r'/')
lg.add('=', r'=')
lg.add('ARROW_ID', r'[a-zA-Z_][a-zA-Z0-9_]*(?=\([a-zA-Z\s]*((?<=[a-zA-Z\s]),[\s]*[a-zA-Z]+[\s]*)*\)[\s]*=>)')
lg.add('ID', r'[a-zA-Z_][a-zA-Z0-9_]*')

# ignore /* comments */
lg.ignore(r'\/\*([^*/\\]+(?=[\s\w\n\r]*))\*\/')

# ignore whitespace
lg.ignore('[ \nt\r\f\v]+')  # lg.ignore(r'[^\S\t]+')

lexer = lg.build()
