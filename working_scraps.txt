let x = 1;
x == True;  -->  False



FunctionDef __init__
    # head : ['f', '(', ['x'], ')', '=>']
    # head : ['h', '(', ['x', 'y'], ')', '=>']
    # head : ['def', 'f', '(', ['x', 'y'], ')']
    # body : [<ast.BinOp object at 0x7f75d193c850>]
    # body : ['{', <ast.Block object at 0x7fb480772fd0>, '}']

    # print(f'tokens : {tokens}')
    # print(f'head : {head}')
    # print(f'body : {body}')


class ParamList(Node):
    def __init__(self, tokens, param):
        self.tokens = [tokens]
        self.params = [param]

    def append_param(self, tokens, param):
        self.tokens = [tokens] + self.tokens
        if param in self.params:
            raise Exception(f'Duplicate parameter {param} in append_param')
        self.params.append(param)

    def eval(self, space):
        return self.params

    def get_str(self):
        return f'({",".join(self.params)})'

    def __len__(self):
        return len(self.params)


class ArgList(Node):
    def __init__(self, tokens, arg):
        self.tokens = [tokens]
        self.args = [arg]

    def append_arg(self, arg):
        self.args.append(arg)

    def eval(self, space):
        pass

    def get_str(self):
        return f'({",".join(self.args)})'

    def __len__(self):
        return len(self.args)


-(x/2) + ((x**2)**(1/-(1.023))) hmm
g(x) => {x + 1;}
g(1);


f(x) => x + 1;
f(x,1,2);

g(x) => {x + 1;}
h(x, y) => x - y;

def f() x + 1;
def f(x) {x + 1;}
def f(x,y) {x - y;}

let x = 2 + 2;
x + 2;
return(x);

1 + 3;
float y = 2.03;
const z = y;
int u = 1;
float w = 3.0;
const m = w = y;


let x = 0;
if( x == 1 ){
    x = 100;
} elif ( x < 0 ){
    x = -100;
} elif ( x > 3 ){
    x = 30;
} elif x == 5 {
    x = 50;
} else {
    x = 0.5;
}



##########

#
# def p_expr_term(p):
#     """
#     expr : term
#     """
#     p[0] = p[1]
#
#
# def p_expr_binop(p):
#     """
#     expr : expr PLUS term
#          | expr MINUS term
#          | term LT term
#          | term LE term
#          | term GT term
#          | term GE term
#          | term NE term
#          | term EQ term
#          | term PIPE term
#          | term CARET term
#          | term AMP term
#          | term LSHIFT term
#          | term RSHIFT term
#     """
#     p[0] = BinOp(*p)
#
#
# def p_term(p):
#     """
#     term : term MUL factor
#          | term DIV factor
#          | term FLOORDIV factor
#          | term MOD factor
#          | term POW factor
#          | factor
#     """
#     if len(p) == 2:
#         p[0] = p[1]
#     else:
#         p[0] = BinOp(*p)
#
#

def p_factor(p):
    """
    factor : constant
           | func_call
           | ID
           | '(' expr ')'
    """
    if len(p) == 2:
        if p.slice[1].type == 'ID':
            p[0] = Variable(name=p[1], declare_type='unknown', value_type='unknown', tokens=p)
        else:
            p[0] = p[1]
    else:
        p[0] = GroupExpr(p, p[2])

#####

def p_expr_binop(p):
    """
    expr : expr PLUS expr
         | expr MINUS expr
         | expr MUL expr
         | expr DIV expr
         | expr FLOORDIV expr
         | expr MOD expr
         | expr POW expr
         | expr LT expr
         | expr LE expr
         | expr GT expr
         | expr GE expr
         | expr NE expr
         | expr EQ expr
         | expr PIPE expr
         | expr CARET expr
         | expr AMP expr
         | expr LSHIFT expr
         | expr RSHIFT expr
    """
    p[0] = BinOp(*p)


def p_factor(p):
    """
    expr : constant
         | func_call
         | ID
         | '(' expr ')'
    """
    if len(p) == 2:
        if p.slice[1].type == 'ID':
            p[0] = Variable(name=p[1], declare_type='unknown', value_type='unknown', tokens=p)
        else:
            p[0] = p[1]
    else:
        p[0] = GroupExpr(p, p[2])



# def p_expr_term(p):
#     """
#     expr : term
#     """
#     p[0] = p[1]
#
#
# def p_expr_binop(p):
#     """
#     expr : expr PLUS term
#          | expr MINUS term
#          | term LT term
#          | term LE term
#          | term GT term
#          | term GE term
#          | term NE term
#          | term EQ term
#          | term PIPE term
#          | term CARET term
#          | term AMP term
#          | term LSHIFT term
#          | term RSHIFT term
#     """
#     p[0] = BinOp(*p)
#
#
# def p_term(p):
#     """
#     term : term MUL factor
#          | term DIV factor
#          | term FLOORDIV factor
#          | term MOD factor
#          | factor
#     """
#     if len(p) == 2:
#         p[0] = p[1]
#     else:
#         p[0] = BinOp(*p)
#
#
# #          | term POW factor
#
# def p_factor(p):
#     """
#     factor : unary
#            | factor POW unary
#     """
#     if len(p) == 2:
#         p[0] = p[1]
#     else:
#         p[0] = BinOp(*p)
#
#
# def p_unary(p):
#     """
#     unary : primary
#           | PLUS unary
#           | MINUS unary %prec UMINUS
#     """
#     if len(p) == 2:
#         p[0] = p[1]
#     elif p[1] == '+':
#         p[0] = p[2]
#     else:
#         p[0] = UnaryOp(*p)
#
#
# def p_primary(p):
#     """
#     primary : constant
#            | func_call
#            | ID
#            | '(' expr ')'
#     """
#     if len(p) == 2:
#         if p.slice[1].type == 'ID':
#             p[0] = Variable(name=p[1], declare_type='unknown', value_type='unknown', tokens=p)
#         else:
#             p[0] = p[1]
#     else:
#         p[0] = GroupExpr(p, p[2])